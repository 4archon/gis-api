create table users (
    id              integer         primary key generated by default as identity (start with 45),
    login           varchar(30),
    password        varchar(30),
    role            varchar(15),
    active          boolean,
    name            varchar(30),
    surname         varchar(30),
    patronymic      varchar(30),
    tg_id           bigint
);

insert into users values(1, 'avalon@jk.com', 'test', 'admin', 't', 'Артем', 'Бакун', 'Максимович', '0');
insert into users values(2, 'chris@jk.com', 'test', 'worker', 't');
insert into users values(3, 'taker@jk.com', 'test', 'worker', 'f');
insert into users values(4, 'test@t.com', 'test', 'worker', 't');
insert into users values(5, 'admin@t.com', 'test', 'admin', 't');

create table points (
    id              integer         primary key generated by default as identity (start with 3082),
    change_id       integer,
    service_id      integer,
    inspection_id   integer,
    active_id       integer
);

create table point_active_log (
    id              integer         primary key generated by default as identity,
    point_id        integer         references points(id),
    point_status    boolean,
    comment         varchar(500),
    change_date     timestamp,
    active          boolean
);

create table change_points_log (
    id              integer         primary key generated by default as identity,
    point_id        integer         references points(id),
    long            float8,
    lat             float8,
    point_address   varchar(150),
    district        varchar(100),
    number_arc      integer,
    arc_type        varchar(30),
    carpet          varchar(30),
    change_date     timestamp,
    comment         varchar(500)
);

create table service_log (
    id              integer         primary key generated by default as identity,
    point_id        integer         references points(id),
    execution_date  timestamp,
    active          boolean
);

create table service_log_data (
    id              integer         primary key generated by default as identity,
    service_log_id  integer         references service_log(id),
    service_type    varchar(50),
    subtype         varchar(50),
    action_arc      integer,
    photo_before    varchar(100),
    photo_left      varchar(100),
    photo_right     varchar(100),
    photo_front     varchar(100),
    video           varchar(100),
    comment         varchar(500),
    photo_extra     varchar(100)
);

create table inspection_log (
    id              integer         primary key generated by default as identity,
    point_id        integer         references points(id),
    execution_date  timestamp,
    active          boolean
);

create table inspection_log_data (
    id                  integer         primary key generated by default as identity,
    inspection_log_id   integer         references inspection_log(id),
    checkup             varchar(30),
    repair_type         varchar(30),
    photo_left          varchar(100),
    photo_right         varchar(100),
    photo_front         varchar(100),
    video               varchar(100),
    comment             varchar(500)
);

create table report (
    id                  integer     primary key generated by default as identity,
    point_id            integer     references points(id),
    user_id             integer[],
    change_point_id     integer     references change_points_log(id),
    point_active_id     integer     references point_active_log(id),
    service_log_id      integer     references service_log(id),
    inspection_log_id   integer     references inspection_log(id),
    appointment_date    timestamp,    
    submission_date     timestamp,
    deadline            timestamp,
    sent_worker         boolean,
    verified            boolean,
    active              boolean
);

create function verify_statuses() returns trigger as $$
begin
    if old.verified is false then
        if new.verified is true then
            if old.change_point_id is not null then
                update points set change_id = old.change_point_id
                where points.id = old.point_id;
            end if;
            if old.point_active_id is not null then
                update points set active_id = old.point_active_id
                where points.id = old.point_id;
            end if;
            if old.service_log_id is not null then
                update points set service_id = old.service_log_id
                where points.id = old.point_id;
            end if;
            if old.inspection_log_id is not null then
                update points set inspection_id = old.inspection_log_id
                where points.id = old.point_id;
            end if;
            return new;
        end if;
    end if;
    return new;
end;
$$ language plpgsql;

create trigger verify_statuses
before update on report
for each row execute procedure verify_statuses();

